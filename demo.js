#!/usr/bin/env node

const { TUI, Input, Select, Checkbox, Form, ProgressBar } = require('./dist/index.js');

async function demo() {
  const tui = new TUI();
  
  console.log('üöÄ TUI Framework Demo\n');
  console.log('Ch·ªçn demo ƒë·ªÉ ch·∫°y:\n');
  
  // T·∫°o menu ch·ªçn demo
  const demoSelect = new Select({
    label: 'Ch·ªçn demo:',
    options: [
      { label: 'üìù Form Input Demo', value: 'form' },
      { label: '‚úÖ Checkbox Demo', value: 'checkbox' },
      { label: 'üìä Progress Bar Demo', value: 'progress' },
      { label: 'üé® Multi-Select Demo', value: 'multiselect' },
      { label: '‚ùå Tho√°t', value: 'exit' }
    ]
  });
  
  tui.add(demoSelect);
  tui.render();
  
  const choice = await demoSelect.waitForSubmit();
  tui.clear();
  
  switch(choice) {
    case 'form':
      await formDemo(tui);
      break;
    case 'checkbox':
      await checkboxDemo(tui);
      break;
    case 'progress':
      await progressDemo(tui);
      break;
    case 'multiselect':
      await multiSelectDemo(tui);
      break;
    case 'exit':
      console.log('Goodbye! üëã');
      process.exit(0);
  }
}

async function formDemo(tui) {
  console.log('\nüìù Form Demo\n');
  
  const form = new Form();
  
  const nameInput = new Input({
    label: 'T√™n c·ªßa b·∫°n:',
    placeholder: 'Nh·∫≠p t√™n...',
    required: true
  });
  
  const emailInput = new Input({
    label: 'Email:',
    placeholder: 'example@email.com',
    validator: (value) => {
      if (!value.includes('@')) return 'Email kh√¥ng h·ª£p l·ªá';
      return null;
    }
  });
  
  const ageInput = new Input({
    label: 'Tu·ªïi:',
    placeholder: '18',
    validator: (value) => {
      const age = parseInt(value);
      if (isNaN(age) || age < 0) return 'Tu·ªïi ph·∫£i l√† s·ªë d∆∞∆°ng';
      return null;
    }
  });
  
  form.addComponent('name', nameInput);
  form.addComponent('email', emailInput);
  form.addComponent('age', ageInput);
  
  tui.add(form);
  tui.render();
  
  const values = await form.waitForSubmit();
  tui.clear();
  
  console.log('\n‚úÖ Form submitted!');
  console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:');
  console.log(JSON.stringify(values, null, 2));
}

async function checkboxDemo(tui) {
  console.log('\n‚úÖ Checkbox Demo\n');
  
  const checkbox1 = new Checkbox({
    label: 'T√¥i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng',
    checked: false
  });
  
  const checkbox2 = new Checkbox({
    label: 'G·ª≠i email th√¥ng b√°o cho t√¥i',
    checked: true
  });
  
  const checkbox3 = new Checkbox({
    label: 'Chia s·∫ª d·ªØ li·ªáu v·ªõi ƒë·ªëi t√°c',
    checked: false
  });
  
  tui.add(checkbox1);
  tui.add(checkbox2);
  tui.add(checkbox3);
  tui.render();
  
  console.log('D√πng Space ƒë·ªÉ toggle, Enter ƒë·ªÉ x√°c nh·∫≠n\n');
  
  // Wait for Enter key
  await new Promise(resolve => {
    process.stdin.once('data', (data) => {
      if (data.toString() === '\r' || data.toString() === '\n') {
        resolve();
      }
    });
  });
  
  tui.clear();
  console.log('\nK·∫øt qu·∫£:');
  console.log(`- ƒêi·ªÅu kho·∫£n: ${checkbox1.getValue() ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Email: ${checkbox2.getValue() ? '‚úÖ' : '‚ùå'}`);
  console.log(`- Chia s·∫ª: ${checkbox3.getValue() ? '‚úÖ' : '‚ùå'}`);
}

async function progressDemo(tui) {
  console.log('\nüìä Progress Bar Demo\n');
  
  const progress = new ProgressBar({
    label: 'ƒêang x·ª≠ l√Ω',
    total: 100,
    width: 40
  });
  
  tui.add(progress);
  tui.render();
  
  // Simulate progress
  for (let i = 0; i <= 100; i += 5) {
    progress.setProgress(i);
    tui.render();
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  tui.clear();
  console.log('\n‚úÖ Ho√†n th√†nh!');
}

async function multiSelectDemo(tui) {
  console.log('\nüé® Multi-Select Demo\n');
  
  const select = new Select({
    label: 'Ch·ªçn c√°c ng√¥n ng·ªØ b·∫°n bi·∫øt:',
    options: [
      { label: 'JavaScript', value: 'js' },
      { label: 'TypeScript', value: 'ts' },
      { label: 'Python', value: 'py' },
      { label: 'Go', value: 'go' },
      { label: 'Rust', value: 'rust' },
      { label: 'Java', value: 'java' },
      { label: 'C++', value: 'cpp' }
    ],
    multiple: true
  });
  
  tui.add(select);
  tui.render();
  
  console.log('D√πng Space ƒë·ªÉ ch·ªçn, Enter ƒë·ªÉ x√°c nh·∫≠n\n');
  
  const selected = await select.waitForSubmit();
  tui.clear();
  
  console.log('\nB·∫°n ƒë√£ ch·ªçn:');
  selected.forEach(lang => {
    console.log(`- ${lang}`);
  });
}

// Run demo
demo().catch(console.error);